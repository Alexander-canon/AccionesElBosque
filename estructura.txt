
Si necesitas conectarte con la terminal de comandos para ejecutar comandos, puedes hacerlo
|acciones-elbosque/                         <-- Directorio raÃ­z del proyect
    â”‚
    â”œâ”€â”€ ðŸ“‚ public/                                <-- Archivos estÃ¡ticos (HTML, CSS, imÃ¡genes)
    â”‚   â”œâ”€â”€ index.html                           <-- PÃ¡gina principal (Landing Page o Dashboard)
    â”‚   â”œâ”€â”€ login.html                           <-- Inicio de sesiÃ³n
    â”‚   â”œâ”€â”€ register.html                        <-- Registro de usuario
    â”‚   â”œâ”€â”€ trading.html                         <-- PÃ¡gina del mÃ³dulo de trading
    â”‚   â”œâ”€â”€ portfolio.html                       <-- GestiÃ³n del portafolio
    â”‚   â”œâ”€â”€ notifications.html                   <-- Notificaciones y alertas
    â”‚   â”œâ”€â”€ admin.html                           <-- Panel de administraciÃ³n
    â”‚   â”œâ”€â”€ integrations.html                    <-- Integraciones con APIs externas
    â”‚   â”œâ”€â”€ ðŸ“‚ assets/                           <-- Recursos como imÃ¡genes, fuentes, Ã­conos
    â”‚   â””â”€â”€ ðŸ“‚ styles/                           <-- Archivos CSS
    â”‚       â”œâ”€â”€ main.css                         <-- Estilos generales
    â”‚       â”œâ”€â”€ login.css                        <-- Estilos para la pÃ¡gina de inicio de sesiÃ³n
    â”‚       â””â”€â”€ dashboard.css                    <-- Estilos del dashboard
    â”‚
    â”œâ”€â”€ ðŸ“‚ src/                                   <-- CÃ³digo fuente del Frontend
    â”‚   â”œâ”€â”€ ðŸ“‚ components/                        <-- Componentes reutilizables
    â”‚   â”‚   â”œâ”€â”€ navbar.js                        <-- Barra de navegaciÃ³n
    â”‚   â”‚   â”œâ”€â”€ sidebar.js                       <-- MenÃº lateral
    â”‚   â”‚   â””â”€â”€ footer.js                        <-- Pie de pÃ¡gina
    â”‚   â”œâ”€â”€ ðŸ“‚ pages/                             <-- Scripts para cada vista/pÃ¡gina
    â”‚   â”‚   â”œâ”€â”€ login.js                         <-- LÃ³gica de autenticaciÃ³n
    â”‚   â”‚   â”œâ”€â”€ register.js                      <-- LÃ³gica de registro
    â”‚   â”‚   â”œâ”€â”€ dashboard.js                     <-- Control de datos en el Dashboard
    â”‚   â”‚   â”œâ”€â”€ trading.js                       <-- Funcionalidad del mÃ³dulo de Trading
    â”‚   â”‚   â”œâ”€â”€ portfolio.js                     <-- Manejo del portafolio de inversiones
    â”‚   â”‚   â”œâ”€â”€ notifications.js                 <-- Notificaciones y alertas
    â”‚   â”‚   â””â”€â”€ admin.js                         <-- Funcionalidad del Panel de AdministraciÃ³n
    â”‚   â”œâ”€â”€ ðŸ“‚ api/                              <-- Conexiones con APIs externas
    â”‚   â”‚   â”œâ”€â”€ tradingApi.js                    <-- ConexiÃ³n con Alpaca, Alpha Vantage, etc.
    â”‚   â”‚   â”œâ”€â”€ paymentsApi.js                   <-- IntegraciÃ³n con Stripe
    â”‚   â”‚   â”œâ”€â”€ logsApi.js                       <-- ConexiÃ³n con ElasticSearch/Splunk
    â”‚   â”‚   â””â”€â”€ securityApi.js                   <-- ImplementaciÃ³n de OAuth, JWT, SSO
    â”‚   â”œâ”€â”€ ðŸ“‚ utils/                            <-- Funciones y utilidades compartidas
    â”‚   â”œâ”€â”€ ðŸ“‚ tests/                            <-- Pruebas unitarias y de integraciÃ³n (Frontend)
    â”‚   â””â”€â”€ main.js                              <-- Archivo de inicializaciÃ³n del frontend
    â”‚
    â”œâ”€â”€ ðŸ“‚ backend/                               <-- LÃ³gica del servidor y API REST
    â”‚   â”œâ”€â”€ server.js                            <-- Archivo principal del servidor (por ejemplo, con Node.js/Express)
    â”‚   â”œâ”€â”€ ðŸ“‚ controllers/                      <-- Controladores de lÃ³gica del backend
    â”‚   â”‚   â”œâ”€â”€ authController.js                <-- Manejo de autenticaciÃ³n
    â”‚   â”‚   â”œâ”€â”€ tradingController.js             <-- Control de Ã³rdenes de trading
    â”‚   â”‚   â”œâ”€â”€ portfolioController.js           <-- GestiÃ³n del portafolio
    â”‚   â”‚   â””â”€â”€ adminController.js               <-- AdministraciÃ³n de usuarios y mercados
    â”‚   â”œâ”€â”€ ðŸ“‚ models/                           <-- DefiniciÃ³n de modelos de datos
    â”‚   â”‚   â”œâ”€â”€ User.js                          <-- Modelo de usuario
    â”‚   â”‚   â”œâ”€â”€ Order.js                         <-- Modelo de Ã³rdenes de trading
    â”‚   â”‚   â””â”€â”€ Portfolio.js                     <-- Modelo de portafolio de inversiones
    â”‚   â”œâ”€â”€ ðŸ“‚ database/                         <-- ConexiÃ³n y configuraciÃ³n de la base de datos
    â”‚   â”‚   â””â”€â”€ db.js                            <-- ConfiguraciÃ³n de la conexiÃ³n

    â”‚   â”œâ”€â”€ ðŸ“‚ middlewares/                      <-- Funciones intermedias para autenticaciÃ³n, validaciÃ³n, etc.
    â”‚   â”œâ”€â”€ ðŸ“‚ routes/                           <-- DefiniciÃ³n de rutas y endpoints
    â”‚   â””â”€â”€ ðŸ“‚ tests/                            <-- Pruebas unitarias e integraciÃ³n (Backend)
    â”‚
    â”œâ”€â”€ ðŸ“‚ config/                                <-- Configuraciones y variables de entorno
    â”‚   â”œâ”€â”€ config.js                            <-- Variables globales (API Keys, puertos, etc.)
    â”‚   â”œâ”€â”€ .env                                 <-- Archivo para variables de entorno (no subir a Git)
    â”‚   â””â”€â”€ env.example                          <-- Ejemplo de configuraciÃ³n de entorno
    â”‚
    â”œâ”€â”€ ðŸ“‚ scripts/                               <-- Scripts para automatizaciÃ³n (CI/CD, despliegue)
    â”‚sÃ³lo crea los archivos mÃ¡s importantes y necesarios para que la aplicaciÃ³n pueda empezar a guardar informaciÃ³n
    â”œâ”€â”€ ðŸ“‚ docs/                                  <-- DocumentaciÃ³n tÃ©cnica y de diseÃ±o
    â”‚   â”œâ”€â”€ diagramas/                           <-- Diagramas UML, C4, BPMN, etc.
    â”‚   â””â”€â”€ reportes/                            <-- Informes, cronogramas, WBS, etc.
    â”‚
    â”œâ”€â”€ package.json                             <-- Dependencias y scripts (para Node.js)
    â”œâ”€â”€ Dockerfile                               <-- Archivo para contenerizaciÃ³n (opcional)
    â”œâ”€â”€ README.md                                <-- DocumentaciÃ³n general del proyecto
    â””â”€â”€ .gitignore                               <-- Archivos y carpetas a excluir en Git


Estrucutra para crear aplicacion trading para la universidad   

Solo agrega codigo en los archivos que se indican y no agregues codigo en los archivos que no se indican.
solo agrega el codigo, no es necesario que agregues o me muestres el codigo que no se modifica

Detalles a tener en cuenta:

	â€¢	Backend:
	â€¢	Node.js/Express: Ideal para mantener el mismo lenguaje en frontend y backend (JavaScript).

    â€¢	Frontend:
        â€¢	Frameworks JavaScript modernos: Angular, React o Vue.
        â€¢	Plantillas y componentes UI: Uso de bibliotecas como React Material, Angular Material o PrimeNG para acelerar el desarrollo y mejorar la experiencia de usuario.

    â€¢	Bases de Datos:
	    â€¢	SQL: MySQL,


    â€¢	IntegraciÃ³n de APIs:
	    â€¢	APIs de trading: Alpaca, Alpha Vantage, Tradier, Polygon.io, etc.


Recuerda que se debe seguir la guia de estilos y principios de:_

https://brand.mit.edu/brand-architecture
https://brand.mit.edu/logos-marks
https://brand.mit.edu/colors
https://brand.mit.edu/typography
https://brand.mit.edu/visual-identity
https://brand.mit.edu/guidelines

Cada vez que se cree un diseÃ±o nuevo se debe seguir la guia de DiseÃ±o de Apple y Google
Tambien es importante que se siga la guia de DiseÃ±o de Google:

https://material.io/
https://material.io/design/introduction 

https://developer.apple.com/design/human-interface-guidelines/



Esto No es necesario crearlo:
    â”‚   â”œâ”€â”€ ðŸ“‚ services/                         <-- LÃ³gica de negocio y servicios (e.g., cÃ¡lculo de comisiones)